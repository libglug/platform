#include "platform_builder.h"
#include "null/platform.h"

#include <glug/os.h>

typedef glug_bool (*unused_context)(struct glug_plat_version *, const plat_context *);

#if defined(GLUG_OS_WIN)

#include "win32/platform.h"

#define WIN32_LEAN_AND_MEAN
#include <Windows.h>

void build_platform(struct glug_plat *platform)
{
    struct win32_context context;
    HANDLE ntdll = LoadLibrary(TEXT("ntdll.dll"));
    HANDLE versiondll = LoadLibrary(TEXT("version.dll"));
    memset(&context, 0, sizeof(struct win32_context));

    platform->os = os_win;
    platform->os_version = (unused_context)os_version_null;
    platform->kernel_version = (unused_context)os_version_null;

    if (ntdll)
    {
        RtlGetVersion_t get_version = (RtlGetVersion_t)GetProcAddress(ntdll, TEXT("RtlGetVersion"));
        if (get_version)
        {
            context.rtl_get_version = get_version;
            platform->os_version = os_version_win;
        }

        context.ntdll = ntdll;
    }

    if (versiondll)
    {
        FARPROC get_ver_size = GetProcAddress(versiondll, TEXT("GetFileVersionInfoSizeA"));
        FARPROC get_ver_info = GetProcAddress(versiondll, TEXT("GetFileVersionInfoA"));
        FARPROC ver_query    = GetProcAddress(versiondll, TEXT("VerQueryValueA"));
        if (get_ver_size && get_ver_info && ver_query)
        {
            context.get_version_info_size = (GetFileVersionInfoSize_t )get_ver_size;
            context.get_version_info      = (GetFileVersionInfo_t)get_ver_info;
            context.version_query_value   = (VerQueryValue_t)ver_query;
            platform->kernel_version      = kernel_version_win;
        }

        context.versiondll = versiondll;
    }

    platform->plat_context = context;
}

void free_platform(struct glug_plat *platform)
{
    if (platform)
    {
        if (platform->plat_context.ntdll)
            FreeLibrary(platform->plat_context.ntdll);

        if (platform->plat_context.versiondll)
            FreeLibrary(platform->plat_context.versiondll);
    }
}

#elif defined(GLUG_OS_MAC)

#include "macos/platform.h"

void build_platform(struct glug_plat *platform)
{
    platform->os = os_mac;
    platform->os_version = supports_nsprocess_operatingsystemversion() ? os_version_mac : os_version_fallback_mac;
    platform->kernel_version = kernel_version_mac;
}

void free_platform(struct glug_plat *platform)
{
    
}

#elif defined(GLUG_OS_LIN)

#include "linux/platform.h"
#include "posix/platform.h"

void build_platform(struct glug_plat *platform)
{
    platform->os = os_linux;
    platform->os_version = os_version_linux;
    platform->kernel_version = kernel_version_linux;
}

#elif defined(GLUG_OS_BSD)

#include "bsd/platform.h"

void build_platform(struct glug_plat *platform)
{
    platform->os = os_bsd;
    platform->os_version = os_version_bsd;
    platform->kernel_version = kernel_version_bsd;
}

#else // null

void build_platform(struct glug_plat *platform)
{
    platform->os = os_null;
    platform->os_version = os_version_null;
    platform->kernel_version = kernel_version_null;
}

#endif
